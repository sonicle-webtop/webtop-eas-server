<?php
/**
 * SyncTask
 *
 * PHP version 5
 *
 * @category Class
 * @package  WT\Client\Tasks
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WebTop Tasks
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: dev-team@sonicle.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WT\Client\Tasks\Model;

use \ArrayAccess;
use \WT\Client\Tasks\ObjectSerializer;

/**
 * SyncTask Class Doc Comment
 *
 * @category Class
 * @description Bean for carry task&#39;s fields
 * @package  WT\Client\Tasks
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SyncTask implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SyncTask';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'etag' => 'string',
        'subject' => 'string',
        'start' => 'string',
        'due' => 'string',
        'status' => 'string',
        'complOn' => 'string',
        'impo' => 'int',
        'prvt' => 'bool',
        'notes' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'etag' => null,
        'subject' => null,
        'start' => null,
        'due' => null,
        'status' => null,
        'complOn' => null,
        'impo' => null,
        'prvt' => null,
        'notes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'etag' => 'etag',
        'subject' => 'subject',
        'start' => 'start',
        'due' => 'due',
        'status' => 'status',
        'complOn' => 'complOn',
        'impo' => 'impo',
        'prvt' => 'prvt',
        'notes' => 'notes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'etag' => 'setEtag',
        'subject' => 'setSubject',
        'start' => 'setStart',
        'due' => 'setDue',
        'status' => 'setStatus',
        'complOn' => 'setComplOn',
        'impo' => 'setImpo',
        'prvt' => 'setPrvt',
        'notes' => 'setNotes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'etag' => 'getEtag',
        'subject' => 'getSubject',
        'start' => 'getStart',
        'due' => 'getDue',
        'status' => 'getStatus',
        'complOn' => 'getComplOn',
        'impo' => 'getImpo',
        'prvt' => 'getPrvt',
        'notes' => 'getNotes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['etag'] = isset($data['etag']) ? $data['etag'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['due'] = isset($data['due']) ? $data['due'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['complOn'] = isset($data['complOn']) ? $data['complOn'] : null;
        $this->container['impo'] = isset($data['impo']) ? $data['impo'] : null;
        $this->container['prvt'] = isset($data['prvt']) ? $data['prvt'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['etag'] === null) {
            $invalidProperties[] = "'etag' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['impo'] === null) {
            $invalidProperties[] = "'impo' can't be null";
        }
        if ($this->container['prvt'] === null) {
            $invalidProperties[] = "'prvt' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['etag'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['impo'] === null) {
            return false;
        }
        if ($this->container['prvt'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Task ID (internal)
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets etag
     *
     * @return string
     */
    public function getEtag()
    {
        return $this->container['etag'];
    }

    /**
     * Sets etag
     *
     * @param string $etag Revision tag
     *
     * @return $this
     */
    public function setEtag($etag)
    {
        $this->container['etag'] = $etag;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets start
     *
     * @return string
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param string $start Start date/time (ISO date/time YYYYMMDD’T’HHMMSS’Z’)
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets due
     *
     * @return string
     */
    public function getDue()
    {
        return $this->container['due'];
    }

    /**
     * Sets due
     *
     * @param string $due Due date/time (ISO date/time YYYYMMDD’T’HHMMSS’Z’)
     *
     * @return $this
     */
    public function setDue($due)
    {
        $this->container['due'] = $due;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Completion status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets complOn
     *
     * @return string
     */
    public function getComplOn()
    {
        return $this->container['complOn'];
    }

    /**
     * Sets complOn
     *
     * @param string $complOn Completed date/time (ISO date/time YYYYMMDD’T’HHMMSS’Z’)
     *
     * @return $this
     */
    public function setComplOn($complOn)
    {
        $this->container['complOn'] = $complOn;

        return $this;
    }

    /**
     * Gets impo
     *
     * @return int
     */
    public function getImpo()
    {
        return $this->container['impo'];
    }

    /**
     * Sets impo
     *
     * @param int $impo Priority flag (0=low, 1=normal, 2=high)
     *
     * @return $this
     */
    public function setImpo($impo)
    {
        $this->container['impo'] = $impo;

        return $this;
    }

    /**
     * Gets prvt
     *
     * @return bool
     */
    public function getPrvt()
    {
        return $this->container['prvt'];
    }

    /**
     * Sets prvt
     *
     * @param bool $prvt Private flag
     *
     * @return $this
     */
    public function setPrvt($prvt)
    {
        $this->container['prvt'] = $prvt;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes Description
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


